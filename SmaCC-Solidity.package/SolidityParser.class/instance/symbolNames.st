generated
symbolNames
	^ #('"%"' '"**"' '"++"' '"--"' '"*"' '"/"' '"delete"' '"&"' '"<<"' '">>"' '"+"' '"-"' '"!"' '"^"' '"finney"' '"ether"' '"seconds"' '"minutes"' '"wei"' '"=:"' '"|"' '"("' '"["' '"."' '"pragma"' '";"' '"~"' '"hours"' '"^="' '"&="' '"<<="' '">>="' '"="' '"|="' '"+="' '")"' '"constant"' '"internal"' '"else"' '","' '"-="' '"szabo"' '"!="' '"<"' '"<="' '">"' '"&&"' '"=="' '">="' '"/="' '"%="' '":"' '"?"' '"||"' '"*="' '"days"' '"indexed"' '"if"' '"while"' '"_"' '"returns"' '"constructor"' '"assembly"' '"address"' '"bool"' '"string"' '"var"' '"weeks"' '"do"' '"]"' '"default"' '"switch"' '"let"' '":="' '"->"' '"case"' '"function"' '"break"' '"return"' '"throw"' '"emit"' '"new"' '"continue"' '"=>"' '"library"' '"interface"' '"is"' '"pure"' '"}"' '"mapping"' '"view"' '"years"' '"import"' '"as"' '"from"' '"{"' '"contract"' '"payable"' '"enum"' '"struct"' '"public"' '"for"' '"using"' '"anonymous"' '"event"' '"private"' '"external"' '"memory"' '"storage"' '"modifier"' '<byte>' '<int>' '<uint>' '<stringLiteral>' '<decimalnumber>' '<hexnumber>' '<realnumber>' '<hexliteral>' '<booleanliteral>' '<fixed>' '<ufixed>' '<identifier>' '<nestedids>' '<whitespace>' '<comment>' 'Version' '( Version ''version'')' '( Version ''version'')*' 'LiteralString' 'LiteralHexa' 'LiteralNumber' 'LiteralBoolean' 'Literal' 'LiteralIdentifier' 'ImportDirective' 'LiteralNestedIdentifier' 'PragmaDirective' 'LiteralHexaString' 'LiteralHexaNumber' '( SourceUnit ''sourceunit'')*' '( SourceUnit ''sourceunit'')' 'LiteralDecimalNumber' 'LiteralRealNumber' 'LiteralEtherAmount' 'SourceUnit' 'B e g i n' 'RootSource' 'LiteralUnit' '( LiteralDecimalNumber LiteralRealNumber LiteralRealNumber)' '( "^" ">=" ">" "<" "<=" "~")' '( ( "^" ">=" ">" "<" "<=" "~") ''operator'')' '( ( "^" ">=" ">" "<" "<=" "~") ''operator'')?' '( <decimalnumber> <realnumber>)' '( "." ( <decimalnumber> <realnumber>) ''number'')' '( "." ( <decimalnumber> <realnumber>) ''number'')*' '( "as" LiteralIdentifier ''alias'')' '( "as" LiteralIdentifier ''alias'')?' '( "*" ''all'' LiteralIdentifier ''component_id'')' '( "," LiteralIdentifier ''component_id'' ( "as" LiteralIdentifier ''alias'')?)' '( "," LiteralIdentifier ''component_id'' ( "as" LiteralIdentifier ''alias'')?)*' '( "contract" "library" "interface")' 'InheritanceSpecifier' '( "," InheritanceSpecifier ''inheritance'')' '( "," InheritanceSpecifier ''inheritance'')*' '( "is" InheritanceSpecifier ''inheritance'' ( "," InheritanceSpecifier ''inheritance'')*)' '( "is" InheritanceSpecifier ''inheritance'' ( "," InheritanceSpecifier ''inheritance'')*)?' '( ContractPart ''statement'')' '( ContractPart ''statement'')*' 'StateVariableDeclaration' 'UsingForDeclaration' 'StructDefinition' 'UserModifierDefinition' 'ConstructorDefinition' 'FunctionDefinition' 'EventDefinition' 'EnumDefinition' 'UserDefinedTypeName' 'ExpressionList' '( "(" ExpressionList ''arguments'' ")")' '( "(" ExpressionList ''arguments'' ")")?' '( "constant" "pure" "view")' 'ModifierFunctionImmuable' 'ModifierFunctionPayable' '( "public" "private")' 'ModifierPrivacy' '( "internal" "external")' 'ModifierVisibility' 'AssemblyExpression' 'UserModifierInvocation' 'ModifierFunctionDefinition' 'StateVariableDeclarationMod' '( "memory" "storage")' 'ModifierStorage' 'ParameterList' '( ParameterList ''parameters'')' '( ParameterList ''parameters'')?' 'Block' '( ExpressionList ''expressions'')' '( ExpressionList ''expressions'')?' '( "(" ( ExpressionList ''expressions'')? ")")' '( "(" ( ExpressionList ''expressions'')? ")")?' 'IndexedParameterList' '( "anonymous" ''modifier'')' '( "anonymous" ''modifier'')?' 'EnumValue' '( EnumValue ''value'')' '( EnumValue ''value'')?' '( "," EnumValue ''value'')' '( "," EnumValue ''value'')*' 'VariableDeclaration' '( VariableDeclaration ''field'' ";")' '( VariableDeclaration ''field'' ";")*' '( VariableDeclaration ''field'' ";" ( VariableDeclaration ''field'' ";")*)' '( VariableDeclaration ''field'' ";" ( VariableDeclaration ''field'' ";")*)?' 'TypeName' '( "*" ''all'' TypeName ''type'')' 'ElementaryTypeName' 'MappingTypeName' 'ArrayTypeName' 'FunctionTypeName' '( Expression ''expression'')' '( Expression ''expression'')?' 'Factor' 'Expression' 'Statement' 'ContractPart' 'RootSourceSol' '( "address" "bool" "string" "var" <int> <uint> <byte> <fixed> <ufixed>)' '( ModifierStorage ''storage_modifier'')' '( ModifierStorage ''storage_modifier'')?' 'IdentifierList' '( "var" IdentifierList ''var_id_list'')' '( "=" Expression ''assign_expression'')' '( "=" Expression ''assign_expression'')?' 'VariableDefinition' '( StateVariableDeclarationMod ''modifier'')' '( StateVariableDeclarationMod ''modifier'')?' '( "=" Expression ''expression'')' '( "=" Expression ''expression'')?' '( ModifierVisibility ModifierFunctionImmuable ModifierFunctionPayable)' '( ( ModifierVisibility ModifierFunctionImmuable ModifierFunctionPayable) ''modifier'')' '( ( ModifierVisibility ModifierFunctionImmuable ModifierFunctionPayable) ''modifier'')*' '( "returns" ParameterList ''returned_types'')' '( "returns" ParameterList ''returned_types'')?' '( ModifierFunctionDefinition ''modifier'')' '( ModifierFunctionDefinition ''modifier'')*' '( ";" Block ''block'')' '"indexed"?' '( LiteralIdentifier ''identifier'')' '( LiteralIdentifier ''identifier'')?' 'IndexedParameter' '( "," IndexedParameter ''parameter'')' '( "," IndexedParameter ''parameter'')*' '( IndexedParameter ''parameter'' ( "," IndexedParameter ''parameter'')*)' '( IndexedParameter ''parameter'' ( "," IndexedParameter ''parameter'')*)?' 'Parameter' '( "," Parameter ''parameter'')' '( "," Parameter ''parameter'')*' '( Parameter ''parameter'' ( "," Parameter ''parameter'')*)' '( Parameter ''parameter'' ( "," Parameter ''parameter'')*)?' '( Statement ''statement'')' '( Statement ''statement'')*' 'IfStatement' 'WhileStatement' 'ForStatement' 'InlineAssemblyStatement' 'DoWhileStatement' 'PlaceholderStatement' 'Continue' 'Break' 'Return' 'Throw' 'SimpleStatement' 'Emit' '( DoWhileStatement PlaceholderStatement Continue Break Return Throw SimpleStatement Emit)' '( "else" Statement ''else_statement'')' '( "else" Statement ''else_statement'')?' '( SimpleStatement ''initialization'')' '( SimpleStatement ''initialization'')?' '( Expression ''condition'')' '( Expression ''condition'')?' '( ExpressionList ''increment_list'')' '( ExpressionList ''increment_list'')?' '( LiteralString ''value'')' '( LiteralString ''value'')?' 'AssemblyBlock' '( Expression ''returned_expression'')' '( Expression ''returned_expression'')?' 'FunctionCall' '( ( LiteralIdentifier ''identifier'')? ",")' '( ( LiteralIdentifier ''identifier'')? ",")*' 'OperationPostfix' 'OperationPrefix' 'OperationsUnary' '( "++" "--")' '( "!" "~" "delete" "++" "--" "+" "-")' 'ParenthesisExpressionFollowup' '( ParenthesisExpressionFollowup ''follow_expression'')' '( ParenthesisExpressionFollowup ''follow_expression'')?' 'ExpressionParenthesis' 'OperationPower' 'OperationMultiplication' 'OperationDivision' 'OperationModule' 'OperationAddition' 'OperationSubstraction' 'OperationArithmetic' 'OperationBitShift' 'OperationBitAnd' 'OperationBitXor' 'OperationBitOr' 'OperationBit' '( "<<" ">>")' 'OperationCompare' 'OperationEquals' 'OperationNotEquals' 'OperationAnd' 'OperationOr' 'OperationTernary' 'OperationComparingLogic' '( "<" ">" "<=" ">=")' '( "=" "|=" "^=" "&=" "<<=" ">>=" "+=" "-=" "*=" "/=" "%=")' 'OperationAssign' 'NewExpression' 'IndexAccessExpression' 'MemberAccess' 'TupleExpression' 'Term' 'IndexAccess' '( IndexAccess ''index'')' '( IndexAccess ''index'')*' 'SimpleTerm' '( Expression ''index'')' '( Expression ''index'')?' 'FunctionCallArguments' 'NameValueList' '( NameValueList ''name_value_list'')' '( NameValueList ''name_value_list'')?' '( "," Expression ''expression'')' '( "," Expression ''expression'')*' '( "," LiteralIdentifier ''id'' ":" Expression ''expression'')' '( "," LiteralIdentifier ''id'' ":" Expression ''expression'')*' '( ",")' '( ",")?' '( "," ( Expression ''expression'')?)' '( "," ( Expression ''expression'')?)*' '( Expression ''expression'' ( "," ( Expression ''expression'')?)*)' '( Expression ''expression'' ( "," ( Expression ''expression'')?)*)?' '( "," ( Expression ''expression'')?)+' 'AssemblyStatement' '( AssemblyStatement ''asm_item'')' '( AssemblyStatement ''asm_item'')*' 'AssemblyIf' 'AssemblyFor' 'AssemblySwitch' 'AssemblyValue' 'FunctionalAssemblyExpression' 'AssemblyLocalBinding' 'AssemblyAssignment' 'AssemblyLabel' 'AssemmblyFunctionDefinition' 'AssemblyExpressionList' '( AssemblyExpressionList ''parameters'')' '( AssemblyExpressionList ''parameters'')?' '( "," AssemblyExpression ''expression'')' '( "," AssemblyExpression ''expression'')*' 'AssemblyCase' '( AssemblyCase ''case'')' '( AssemblyCase ''case'')+' 'AssemblyAssignable' '( AssemblyExpressionList ''arguments'')' '( AssemblyExpressionList ''arguments'')?' 'E O F' 'error' 'ContractDefinition' 'ModifierStateVariableVisibility')